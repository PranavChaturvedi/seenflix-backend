# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: serverlessbackend
# "service" is the name of this project. This will also be added to your AWS resource names.
service: seenflix-backend
useDotenv: true

provider:
  name: aws
  runtime: python3.12
  region: ap-south-1
  stage: ${opt:stage, 'v1'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource: 
            - arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/*
  environment:
    SUPABASE_HOST: ${env:SUPABASE_HOST, ssm:/supabase/db/host}
    SUPABASE_PASSWORD: ${env:SUPABASE_PASSWORD, ssm:/supabase/db/password}
    SUPABASE_PORT: ${env:SUPABASE_PORT, ssm:/supabase/db/port}
    SUPABASE_USER: ${env:SUPABASE_USER, ssm:/supabase/db/user}
    ECS_TASK_EXECUTION_ROLE: ${env:ECS_TASK_EXECUTION_ROLE, ssm:/ecs/taskExectionArn}
    VPC_SUBNETS: ${env:VPC_SUBNETS, ssm:/vpc/default/subnets}
    VPC_SGROUP: ${env:VPC_SGROUP, ssm:/vpc/default/security_group}
  httpApi:
    authorizers:
      apiJwtAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: ${env:CLERK_JWT_ISSUER, ssm:/api-gateway/authorizer/issuer/url}
        audience:
          - ${env:JWT_AUTHORIZER_AUD, ssm:/api-gateway/authorizer/aud}

package:
    patterns:
      - '!node_modules/**'
      - '!.venv/**'
      - '!__pycache__/**'

custom:
  tmdbAPIEnv: &tmdbAPIEnv
    TMDB_API_KEY: ${env:TMDB_API_KEY, ssm:/tmdb/api/key}
    TMDB_API_PATH: ${env:TMDB_API_URL, ssm:/tmdb/api/path}
  pythonRequirements:
    dockerizePip: non-linux
    slim: true
    strip: false     
    pipCmdExtraArgs:
      - "--platform manylinux2014_x86_64"
      - "--no-deps"


functions:
  # Fargate Task for loading the DB - Movies (even weeks)
  imdbCronLoaderMovies:
    handler: lambda_functions.imdb_cron_loader.handler
    description: CRON lambda to run ECS Fargate task for loading movie db (even weeks)
    events:
      - schedule: 
          rate: cron(0 0 ? * SUN *)  # Every other Sunday starting even weeks
          enabled: true
          input:
            type: "movie"
            week_pattern: "even"
    timeout: 30

  # Fargate Task for loading the DB - TV Shows (odd weeks)
  imdbCronLoaderTv:
    handler: lambda_functions.imdb_cron_loader.handler
    description: CRON lambda to run ECS Fargate task for loading tv db (odd weeks)
    events:
      - schedule: 
          rate: cron(0 0 ? * SUN *)  # Every other Sunday starting odd weeks
          enabled: true
          input:
            type: "tv"
            week_pattern: "odd"
    timeout: 30
  
  
  addEntry:
    handler: lambda_functions.add_entry.handler
    description: Add Entry for a User in the DB
    events:
      - httpApi:
          path: /add-entry
          method: POST
          authorizer:
            name: apiJwtAuthorizer
    timeout: 30

  deleteEntry:
    handler: lambda_functions.delete_entry.handler
    description: Delete Entry for a User in the DB
    events:
      - httpApi:
          path: /delete-entry
          method: DELETE
          authorizer:
            name: apiJwtAuthorizer
    timeout: 30
  
  # GET API for the Search of movies and tv shows
  searchMedia:
    handler: lambda_functions.search_media.handler
    description: GET API for searching media
    events:
      - httpApi:
          path: /search
          method: GET
          authorizer:
            name: apiJwtAuthorizer
    timeout: 30

  # GET API for the showlist of a user (read up on authorization/ authentication of APIs)  
  getWatchlist:
    handler: lambda_functions.get_watchlist.handler
    description: GET API to get User Watchlist paginated
    events:
      - httpApi:
          path: /sf-watchlist
          method: GET
          authorizer:
            name: apiJwtAuthorizer
    timeout: 30
    
  getRecommnedations:
    handler: lambda_functions.get_recommendations.handler
    description: GET API for user recommendations
    events:
      - httpApi:
          path: /recommendations
          method: GET
          authorizer:
            name: apiJwtAuthorizer
    timeout: 30





plugins:
  - serverless-python-requirements
  - serverless-offline
  - serverless-dotenv-plugin
