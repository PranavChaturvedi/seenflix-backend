# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: serverlessbackend
# "service" is the name of this project. This will also be added to your AWS resource names.
service: seenflix-backend

provider:
  name: aws
  runtime: python3.12
  region: ap-south-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource: 
            - arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/supabase/db/*

custom:
  supabaseEnv: &supabaseEnv 
    SUPABASE_HOST: ${env:SUPABASE_HOST, ssm:/supabase/db/host}
    SUPABASE_PASSWORD: ${env:SUPABASE_PASSWORD, ssm:/supabase/db/password}
    SUPABASE_PORT: ${env:SUPABASE_PORT, ssm:/supabase/db/port}
    SUPABASE_USER: ${env:SUPABASE_USER, ssm:/supabase/db/user}
    # TMBD_API_KEY: /aws/ssm/parameter/tmdb/api/key
    # TMDB_API_URL: /aws/ssm/parameter/tdmb/api/url

functions:
  imdb_cron_backup:
    handler: lambda_functions.imdb_id_backup.handler
    description: CRON lambda to save the csv backups of movies and tv shows
    environment:
      <<: *supabaseEnv
    events:
      - schedule: 
          rate: cron(0 0 ? * SUN *)
          enabled: true


  # This Lambda should start a fargate task
  load_db:
    handler: lambda_functions.load_db.handler
    description: CRON lambda to load the db using the API responses 
    events:
      - schedule: 
          rate: cron(0 0 ? * MON *)
          enabled: true

  addEntry:
    handler: lambda_functions.add_entry.handler
    description: Add Entry for a User in the DB
    events:
      - http:
          path: /add-entry
          method: POST 




plugins:
  - serverless-python-requirements
  - serverless-offline
