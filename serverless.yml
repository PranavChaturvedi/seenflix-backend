# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: serverlessbackend
# "service" is the name of this project. This will also be added to your AWS resource names.
service: seenflix-backend
useDotenv: true

provider:
  name: aws
  runtime: python3.12
  region: ap-south-1
  stage: ${opt:stage, 'v1'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource: 
            - arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/*
  environment:
    SUPABASE_HOST: ${env:SUPABASE_HOST, ssm:/supabase/db/host}
    SUPABASE_PASSWORD: ${env:SUPABASE_PASSWORD, ssm:/supabase/db/password}
    SUPABASE_PORT: ${env:SUPABASE_PORT, ssm:/supabase/db/port}
    SUPABASE_USER: ${env:SUPABASE_USER, ssm:/supabase/db/user}

package:
    patterns:
      - '!node_modules/**'
      - '!.venv/**'
      - '!__pycache__/**'

custom:
  tmdbAPIEnv: &tmdbAPIEnv
    TMDB_API_KEY: ${env:TMDB_API_KEY, ssm:/tmdb/api/key}
    TMDB_API_PATH: ${env:TMDB_API_URL, ssm:/tmdb/api/path}
  pythonRequirements:
    dockerizePip: non-linux
    slim: true
    strip: false     
    pipCmdExtraArgs:
      - "--platform manylinux2014_x86_64"
      - "--no-deps"


functions:
  imdbCronLoader:
    handler: lambda_functions.imdb_cron_loader.handler
    description: CRON lambda to run ECS Fargate task for loading db
    events:
      - schedule: 
          rate: cron(0 0 ? * SUN *)
          enabled: false
    timeout: 30


  # Fargate Task for loading the DB.

  addEntry:
    handler: lambda_functions.add_entry.handler
    description: Add Entry for a User in the DB
    events:
      - httpApi:
          path: /add-entry
          method: POST
    timeout: 30
  
  # GET API for the Search of movies and tv shows
  searchMedia:
    handler: lambda_functions.search_media.handler
    description: GET API for searching media
    events:
      - httpApi:
          path: /search
          method: GET
    timeout: 30
  
  getWatchlist:
    handler: lambda_functions.get_watchlist.handler
    description: GET API to get User Watchlist paginated
    events:
      - httpApi:
          path: /sf-watchlist
          method: GET
    timeout: 30
    
  getRecommnedations:
    handler: lambda_functions.get_recommendations.handler
    description: GET API for user recommendations
    events:
      - httpApi:
          path: /recommendations
          method: GET
    timeout: 30

  # GET API for the showlist of a user (read up on authorization/ authentication of APIs)




plugins:
  - serverless-python-requirements
  - serverless-offline
  - serverless-dotenv-plugin
